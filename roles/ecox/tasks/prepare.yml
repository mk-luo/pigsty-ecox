---
#------------------------------------------------------------------------------
# check postgres instance precondition
#  --- empty  ---> clean ---> init
#  --- exist  ^--> [action=abort] ---> abort entire playbook (for the sake of data safety)
#             ^--> [action=skip]  ---> skip current play for this instance
#             ^--> [action=clean] ---> clean ---> init
#------------------------------------------------------------------------------
- name: Check postgres existance
  tags: pg_check
  block:

    - name: Check for existing postgres instance
      command: 'ss -tp state listening sport = :{{ pg_port }}'
      any_errors_fatal: true
      register: check_pg_port_result

    - name: Set fact whether pg port is open
      set_fact:
        pg_exists: "{{ 'post' in check_pg_port_result.stdout }}"

    # when any running instance exists, abort play in two cases:
    # 1. pg_disable_purge = true          (global flag to prevent accidentally purge)
    # 2. pg_exists_action == 'abort'
    - name: Abort due to existing postgres instance
      when: pg_exists and pg_disable_purge or pg_exists and pg_exists_action == 'abort'
      any_errors_fatal: true
      fail: msg="Abort because pg instance {{ pg_instance }} is already running"

    - name: Skip due to running instance
      when: pg_exists and pg_exists_action == 'skip'
      any_errors_fatal: true
      meta: end_host

    - name: Clean existing postgres instance
      when: pg_exists and pg_exists_action == 'clean' # DANGEROUS!
      debug:
        msg: "[DANGEROUS] running instance {{ pg_instance }} will be purged!"


#------------------------------------------------------------------------------
# purge existing postgres
#------------------------------------------------------------------------------
# DANGEROUS! remove all postgres data of target machine
# BUT, this is your choice
- name: Cleanup postgresql
  tags: pg_clean
  become: yes
  block:
    - name: Shutdown existing postgres service
      shell: |
        # first, gracefully stop service
        systemctl stop ecox
        systemctl stop pg_exporter

        # then, manually stop service if still exists
        if ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D'  | grep checkpointer ; then
            pg_ctl -D {{ pg_data }} stop --mode=immediate
            ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D' | awk '{print $1}' | xargs kill -9
        fi

        if ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D'  | grep checkpointer ; then
            ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D' | awk '{print $1}' | xargs kill -9
            sleep 5 # if still alive, leave 5s grace peroid and force a kill -9
        fi

        if ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D'  | grep checkpointer ; then
            exit 1  # report failure if still alive
        fi
        exit 0


    - name: Remove registerd zookeeper service
      ignore_errors: yes
      shell: |
        export LD_LIBRARY_PATH=/usr/EcoX/lib
        /usr/EcoX/bin/zkcli {{ zkhost }} deleteall {{ pg_cluster }}
        exit 0


    # TODO: only remove necessary dir instead of all
    - name: Remove existing postgres data
      file: path={{ item }} state=absent
      with_items:
        - /pg


#------------------------------------------------------------------------------
# Create Directory
#------------------------------------------------------------------------------
# this assumes that
#   /pg is shortcut for postgres home
#   {{ pg_fs_main }} contains the main data             (MUST ALREADY MOUNTED)
#   {{ pg_fs_bkup }} contains archive and backup data   (MUST ALREADY MOUNTED)
#   cluster-version is the default parent folder for pgdata (e.g pg-test-12)
#------------------------------------------------------------------------------
# default variable:
#     pg_fs_main = /export           fast ssd
#     pg_fs_bkup = /var/backups      cheap hdd
#
#     /pg      -> /export/postgres/pg-test-12
#     /pg/data -> /export/postgres/pg-test-12/data
#------------------------------------------------------------------------------
- name: Create postgresql directories
  tags: pg_dir
  become: yes
  block:
    - name: Make sure main and backup dir exists
      file: path={{ item }} state=directory owner=root mode=0777
      with_items:
        - "{{ pg_fs_main }}"

    # pg_cluster_dir:    "{{ pg_fs_main }}/postgres/{{ pg_cluster }}-{{ pg_version }}"
    - name: Create postgres directory structure
      file: path={{ item }} state=directory owner={{ pg_dbsu }} group=postgres mode=0700
      with_items:
        - "{{ pg_cluster_dir }}"
        - "{{ pg_cluster_dir }}/bin"
        - "{{ pg_cluster_dir }}/tmp"


    - name: Create links from current cluster
      file:
        src: "{{ pg_cluster_dir }}"
        dest: /pg
        state: link

    - name: Check if postgres data folder exists
      stat:
        path: "{{ pg_data }}"
      register: pgdatadir_exists


    - name: Abort due to pgdata is exists
      when: pgdatadir_exists.stat.exists and pg_exists_action == 'abort'
      any_errors_fatal: true
      fail: msg="{{ pg_data }} directory already exists on {{ pg_instance }}"

    - name: Clean pgdata
      when: pgdatadir_exists.stat.exists and pg_exists_action == 'clean'
      file: path={{ pg_data }} state=absent


    - name: Make sure data dir exists
      file: path={{ pg_data }} state=directory owner={{ pg_dbsu }} mode=0700



#------------------------------------------------------------------------------
# Copy scripts
#------------------------------------------------------------------------------
- name: Copy postgresql scripts
  tags: pg_scripts
  become: yes
  block:
    - name: Copy postgres scripts to /pg/bin/
      copy: src=pg/ dest=/pg/bin/ owner={{ pg_dbsu }} group=postgres mode=0755

...
