---
- name: Create database on cluster primary
  tags: pg_db
  when: pg_role == 'primary'
  block:
    - debug:
        msg: "{{ database }}"

    - name: Render database {{ database.name }} creation sql
      tags: pg_db_config
      template: src="pg-db.sql" dest=/pg/tmp/pg-db-{{ database.name }}.sql owner={{ pg_dbsu }} group=postgres mode=0755

    - name: Render database {{ database.name }} baseline sql
      tags: pg_db_config
      when: database.baseline is defined
      copy: src="{{ database.baseline }}" dest=/pg/tmp/pg-db-{{ database.name }}-baseline.sql owner={{ pg_dbsu }} group=postgres mode=0755

    # create database with shell command, check database exists as success
    - name: Execute database {{ database.name }} creation command
      tags: pg_db_create
      become_user: "{{ pg_dbsu }}"
      shell: |
        createdb -w -p {{ pg_port }} {% if 'owner' in  database and database.owner != '' %}-O "{{ database.owner }}" {% endif %}
        {% if 'template'   in  database and database.template != ''   %}-T '{{ database.template   }}' {% endif %}
        {% if 'encoding'   in  database and database.encoding != ''   %}-E '{{ database.encoding   }}' {% endif %}
        {% if 'locale'     in  database and database.locale != ''     %}-l '{{ database.locale     }}' {% endif %}
        {% if 'tablespace' in  database and database.tablespace != '' %}-D '{{ database.tablespace }}' {% endif %}
        '{{ database.name }}' || true
        db_exists=$(psql -p {{ pg_port }} -AXtwq postgres -c "SELECT true WHERE EXISTS(SELECT * FROM pg_database WHERE datname = '{{ database.name }}' LIMIT 1);")
        [[ -z "${db_exists}" ]] && exit 1 || exit 0

    - name: Execute database {{ database.name }} creation sql
      tags: pg_db_create
      ignore_errors: true
      become_user: "{{ pg_dbsu }}"
      command: psql {{ database.name }} -p {{ pg_port }} -AXtwqf /pg/tmp/pg-db-{{ database.name }}.sql

    - name: Execute database {{ database.name }} creation sql
      tags: pg_db_create
      ignore_errors: true
      become_user: "{{ pg_dbsu }}"
      command: psql {{ database.name }} -p {{ pg_port }} -AXtwqf /pg/tmp/pg-db-{{ database.name }}-baseline.sql
      when: database.baseline is defined


- name: Create pgbouncer database entry
  when: database.pgbouncer is not defined or database.pgbouncer|bool
  tags: [pg_db, pg_db_pgbouncer]
  block:
    # pgbouncer databases are added to /etc/pgbouncer/database.txt
    - name: Add pgbouncer busniess database
      tags: pg_db_pgbouncer_create
      ignore_errors: true
      become_user: "{{ pg_dbsu }}"
      shell: /pg/bin/pgbouncer-create-db '{{ database.name }}'


